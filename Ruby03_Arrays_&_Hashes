## Ruby
## Control Structures


## Ruby Array - Initialization
• Initialize an empty array with the variable name array
Hint
array = Array.new
or
array = []
• Initialize an array with exactly one nil element in it with the variable name array_1
Hint
array_1 = Array.new(1)
or
array_1 = [nil]
• Initialize an array with exactly two elements with value 10 in it using the variable name array_2.
Hint
array_2 = Array.new(2, 10)
or
array_2 = [10, 10]

# Initialize 3 variables here as explained in the problem statement
array = []
array_1 = [nil]
array_2 = [10,10]




## Ruby Array - Index, Part 1
# The positions are 0 indexed. 

arr = [9, 5, 1, 2, 3, 4, 0, -1]
• A number which is the position of element
>>arr[4]
  => 3
or
>>arr.at(4)
  => 3 
• A range indicating the start and the end position
>>arr[1..3] # .. indicates both indices are inclusive. 
  => [5,1,2]
>>arr[1...3] # ... indicates the last index is excluded.
  => [5,1]
• Start index and the length of the range
>>arr[1,4]
  => [5, 1, 2, 3]

def element_at(arr, index)
    # return the element of the Array variable `arr` at the position `index`
    # arr.at(index) # or
    # arr[index]
    return arr[index]
end

def inclusive_range(arr, start_pos, end_pos)
    # return the elements of the Array variable `arr` between the start_pos and end_pos (both inclusive)
    return arr[start_pos..end_pos]
end

def non_inclusive_range(arr, start_pos, end_pos)
    # return the elements of the Array variable `arr`, start_pos inclusive and end_pos exclusive
    return arr[start_pos...end_pos]
end

def start_and_length(arr, start_pos, length)
    # return `length` elements of the Array variable `arr` starting from `start_pos`
    return arr[start_pos, length]
end




## Ruby Array - Index, Part 2
For the array,
arr = [9, 5, 1, 2, 3, 4, 0, -1]
• To access the elements from the end of the list, we can use negative indices.
 > arr[-1]
 => -1
• The first element of the array can be accessed using
 > arr.first
 => 9
• The last element of the array can be accessed using
 > arr.last
 => -1
• The first n elements of the array can be accessed using
 arr.take(3)
 => [9, 5, 1]
• Everything but the first n elements of the array can be accessed using
 arr.drop(3)
 => [2, 3, 4, 0, -1]

def neg_pos(arr, index)
    # return the element of the array at the position `index` from the end of the list
    arr[-index]
end

def first_element(arr)
    # return the first element of the array
    arr.first
end

def last_element(arr)
    # return the last element of the array
    arr.last
end

def first_n(arr, n)
    # return the first n elements of the array
    arr.take(n)
end

def drop_n(arr, n)
    # drop the first n elements of the array and return the rest
    arr.drop(n)
end




## Ruby Array - Addition
Arrays provide a variety of methods that allow to add elements to them.
• push allows one to add an element to the end of the list.
 >x = [1,2]
 >x.push(3)
 => [1,2,3]
• insert allows one to add one or more elements starting from a given index (shifting elements after the given index in the process).
 >x = [1,2]
 >x.insert(1, 5, 6, 7)
 => [1, 5, 6, 7, 2]
• unshift allows one or more elements to be added at the beginning of the list.
 >x = [1,2,3]
 >x.unshift(10, 20, 30)
 => [10, 20, 30, 1, 2, 3]

def end_arr_add(arr, element)
    # Add `element` to the end of the Array variable `arr` and return `arr`
    arr.push(element)
end

def begin_arr_add(arr, element)
    # Add `element` to the beginning of the Array variable `arr` and return `arr`
    arr.unshift(element)
end

def index_arr_add(arr, index, element)
    # Add `element` at position `index` to the Array variable `arr` and return `arr`
    arr.insert(index, element)
end

def index_arr_multiple_add(arr, index)
    # add any two elements to the arr at the index
    arr.insert(index, 8, 88)
end




## Ruby Array - Deletion
arr = [5, 6, 5, 4, 3, 1, 2, 5, 4, 3, 3, 3] 
• Delete an element from the end of the array
 > arr.pop
 => 3
• Delete an element from the beginning of the array
 > arr.shift
 => 5
• Delete an element at a given position
 > arr.delete_at(2)
 => 4
• Delete all occurrences of a given element
 > arr.delete(5)
 => 5
 > arr
 => [6, 3, 1, 2, 4, 3, 3]

def end_arr_delete(arr)
    # delete the element from the end of the array and return the deleted element
    arr.pop
end

def start_arr_delete(arr)
    # delete the element at the beginning of the array and return the deleted element
    arr.shift
end

def delete_at_arr(arr, index)
    # delete the element at the position #index
    arr.delete_at(index)
end

def delete_all(arr, val)
    # delete all the elements of the array where element = val
    arr.delete(val)
end




## Ruby Array - Selection
def select_arr(arr)
  # select and return all odd numbers from the Array variable `arr`
    return arr.select{|a| (a%2 != 0)}
end

def reject_arr(arr)
  # reject all elements which are divisible by 3
    return arr.delete_if{|a| (a%3 == 0)}
end

def delete_arr(arr)
  # delete all negative elements
    return arr.delete_if{|a| a < 0}
end

def keep_arr(arr)
  # keep all non negative elements ( >= 0)
    return arr.keep_if{|a| a >= 0}
end


















(work in progress)

## end ##
